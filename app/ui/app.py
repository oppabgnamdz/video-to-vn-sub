import streamlit as st
import os
from datetime import datetime
from pathlib import Path
from services.telegram_service import TelegramService

from config import OUTPUT_DIR, TEMP_DIR
from models.data_models import TranslationStats
from services.cache_service import CacheService
from services.video_processor import VideoProcessor
from services.translation.google_translator import GoogleTranslator
from services.translation.openai_translator import OpenAITranslator
from utils.internet_utils import check_internet
from utils.file_utils import (
    validate_file_size,
    save_uploaded_file,
    cleanup_old_files,
    get_unique_filename
)


class StreamlitApp:
    def __init__(self):
        self.cache_service = CacheService()
        self.stats = TranslationStats()
        self.video_processor = VideoProcessor(OUTPUT_DIR)

    def run(self):
        """Kh·ªüi ch·∫°y ·ª©ng d·ª•ng Streamlit"""

        # ·∫®n footer v√† menu c·ªßa Streamlit
        hide_streamlit_style = ''' 
        <style>
            footer {visibility: hidden;}
            #MainMenu {visibility: hidden;}
        </style>'''
        st.markdown(hide_streamlit_style, unsafe_allow_html=True)

        # Sidebar - C√†i ƒë·∫∑t
        with st.sidebar:
            st.title("‚öôÔ∏è C√†i ƒë·∫∑t")
            st.info("üé• ·ª®ng d·ª•ng chuy·ªÉn ƒë·ªïi video th√†nh ph·ª• ƒë·ªÅ v√† d·ªãch t·ª± ƒë·ªông!")

            openai_key = st.text_input(
                'üîë OpenAI API Key (ƒë·ªÉ s·ª≠ d·ª•ng OpenAI)', type='password'
            )

            if openai_key.strip() == "abc":
                openai_key = os.getenv("OPENAI_API_KEY", "")
            translation_style = st.selectbox(
                "‚úçÔ∏è Phong c√°ch d·ªãch:",
                ["üìñ Trang tr·ªçng", "üí¨ Th√¥ng d·ª•ng"]
            )
            if st.button("üóëÔ∏è X√≥a Cache"):
                self.cache_service.clear()
                st.success("‚úÖ ƒê√£ x√≥a cache!")

        if not check_internet():
            return

        uploaded_file = st.file_uploader(
            "üì§ Ch·ªçn file (video ho·∫∑c ph·ª• ƒë·ªÅ)",
            type=['mp4', 'avi', 'mkv', 'mov', 'srt']
        )

        # T·∫°o tabs cho c√°c lo·∫°i input kh√°c nhau
        tab1, tab2 = st.tabs(["üîó URL Th√¥ng th∆∞·ªùng", "üì∫ M3U8 Stream"])

        with tab1:
            direct_url = st.text_input("üîó Nh·∫≠p URL video tr·ª±c ti·∫øp:")
            url_to_process = direct_url if direct_url else None
            source_type = "url" if direct_url else None

        with tab2:
            m3u8_url = st.text_input("üì∫ Nh·∫≠p URL M3U8:")
            if m3u8_url:
                url_to_process = m3u8_url
                source_type = "m3u8"

        # Ki·ªÉm tra c√≥ input h·ª£p l·ªá kh√¥ng
        has_input = uploaded_file or (
            url_to_process and url_to_process.strip())

        process_button = st.button(
            "üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω",
            disabled=not has_input or st.session_state.get(
                "is_processing", False),
            key="process_button"
        )

        if process_button:
            st.session_state["is_processing"] = True

            use_openai = bool(openai_key.strip())
            translate_service = "üåü OpenAI (Ch·∫•t l∆∞·ª£ng cao)" if use_openai else "üÜì Google Translate (Mi·ªÖn ph√≠)"

            st.info(
                f"üîç ƒêang s·ª≠ d·ª•ng **{translate_service}** ƒë·ªÉ d·ªãch ph·ª• ƒë·ªÅ...")

            self._process_request(
                openai_key if openai_key else None,
                uploaded_file,
                url_to_process,
                source_type,
                translation_style
            )

            st.session_state["is_processing"] = False

        self._display_history()

    def _process_request(self, api_key, uploaded_file, url, source_type, intensity):
        try:
            st.subheader("üîÑ ƒêang x·ª≠ l√Ω...")
            progress_bar = st.progress(0)
            status_text = st.empty()

            def update_progress(progress, message):
                progress_bar.progress(progress / 100)
                status_text.text(message)

            update_progress(10, "üì• ƒêang chu·∫©n b·ªã d·ªØ li·ªáu...")

            use_openai = api_key is not None
            translator = (
                OpenAITranslator(self.cache_service,
                                 self.stats, api_key, intensity)
                if use_openai else
                GoogleTranslator(self.cache_service, self.stats)
            )

            if uploaded_file:
                file_extension = uploaded_file.name.split(".")[-1]
                if file_extension.lower() == "srt":
                    self._process_srt_file(
                        uploaded_file, translator, update_progress)
                else:
                    self._process_video_file(
                        uploaded_file, None, "upload", translator, update_progress)

            elif url and url.strip():
                self._process_video_file(
                    None, url, source_type, translator, update_progress)

        except Exception as e:
            st.error(f"‚ùå L·ªói: {str(e)}")

    # C√°c ph∆∞∆°ng th·ª©c kh√°c gi·ªØ nguy√™n...
    def _process_video_file(self, uploaded_file, url, source_type, translator, progress_callback):
        progress_callback(15, "üé¨ ƒêang x·ª≠ l√Ω video...")

        source_data = uploaded_file if uploaded_file else url

        result = self.video_processor.process_video(
            source_type, source_data, progress_callback
        )

        if result.success and result.srt_path:
            translated_srt = translator.translate_srt(
                result.srt_path,
                source_language=result.detected_language,
                progress_callback=progress_callback
            )

            if translated_srt:
                self._handle_success(
                    result.srt_path, translated_srt, result.source_name, result.detected_language)

    def _display_history(self):
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ x·ª≠ l√Ω"""
        st.subheader("üìã L·ªãch s·ª≠ x·ª≠ l√Ω")

        if "processed_files" in st.session_state and st.session_state["processed_files"]:
            for file in reversed(st.session_state["processed_files"]):
                with st.expander(f"{file['source']} - {file['timestamp']}"):
                    st.code(open(file['translated_srt']
                                 ).read(), language='text')
        else:
            st.info("üì≠ Ch∆∞a c√≥ l·ªãch s·ª≠ x·ª≠ l√Ω.")

    def _handle_success(self, original_srt, translated_srt, source_name, detected_language):
        """X·ª≠ l√Ω khi ho√†n th√†nh vi·ªác x·ª≠ l√Ω video v√† d·ªãch ph·ª• ƒë·ªÅ"""
        st.success("‚úÖ Ho√†n th√†nh! T·∫£i file ph·ª• ƒë·ªÅ:")

        col1, col2 = st.columns(2)

        with col1:
            st.download_button("‚¨áÔ∏è T·∫£i ph·ª• ƒë·ªÅ g·ªëc", open(
                original_srt, 'rb'), file_name="original.srt")

        with col2:
            st.download_button("‚¨áÔ∏è T·∫£i ph·ª• ƒë·ªÅ ƒë√£ d·ªãch", open(
                translated_srt, 'rb'), file_name="translated.srt")

        # L∆∞u v√†o l·ªãch s·ª≠
        if "processed_files" not in st.session_state:
            st.session_state["processed_files"] = []

        st.session_state["processed_files"].append({
            'source': source_name,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'translated_srt': translated_srt,
            'language': detected_language
        })

        # Gi·ªõi h·∫°n l·ªãch s·ª≠ l∆∞u tr·ªØ
        if len(st.session_state["processed_files"]) > 10:
            st.session_state["processed_files"] = st.session_state["processed_files"][-10:]

        # G·ª≠i file ph·ª• ƒë·ªÅ ƒë·∫øn Telegram n·∫øu c√≥ c·∫•u h√¨nh
        bot_token = os.getenv("BOT_TOKEN", "")
        chat_id = os.getenv("CHAT_ID", "")
        if bot_token and chat_id:
            telegram_service = TelegramService(bot_token, chat_id)
            short_source_name = (
                source_name[:10] + "...") if len(source_name) > 10 else source_name
            telegram_service.send_file(
                translated_srt, f"üìÑ Ph·ª• ƒë·ªÅ ti·∫øng Vi·ªát cho {short_source_name}")
